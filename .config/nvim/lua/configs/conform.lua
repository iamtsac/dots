local util = require("conform.util")
local conform = require("conform")

cpp_format_opts = [[{
    Language:        Cpp,
    AccessModifierOffset: -4,
    AlignAfterOpenBracket: false,
    AlignEscapedNewlinesLeft: false,
    AlignOperands:   false,
    AlignTrailingComments: false,
    AllowAllParametersOfDeclarationOnNextLine: true,
    AllowShortBlocksOnASingleLine: true,
    AllowShortCaseLabelsOnASingleLine: false,
    AllowShortIfStatementsOnASingleLine: false,
    AllowShortLoopsOnASingleLine: false,
    AllowShortFunctionsOnASingleLine: All,
    AlwaysBreakAfterDefinitionReturnType: false,
    AlwaysBreakTemplateDeclarations: false,
    AlwaysBreakBeforeMultilineStrings: false,
    BreakBeforeBinaryOperators: All,
    BreakBeforeTernaryOperators: true,
    BreakConstructorInitializersBeforeComma: false,
    BinPackParameters: true,
    BinPackArguments: true,
    ColumnLimit:     0,
    ConstructorInitializerAllOnOneLineOrOnePerLine: true,
    ConstructorInitializerIndentWidth: 4,
    DerivePointerAlignment: false,
    ExperimentalAutoDetectBinPacking: false,
    IndentCaseLabels: false,
    IndentWrappedFunctionNames: false,
    IndentFunctionDeclarationAfterType: false,
    MaxEmptyLinesToKeep: 1,
    KeepEmptyLinesAtTheStartOfBlocks: true,
    NamespaceIndentation: All,
    ObjCBlockIndentWidth: 4,
    ObjCSpaceAfterProperty: true,
    ObjCSpaceBeforeProtocolList: true,
    PenaltyBreakBeforeFirstCallParameter: 19,
    PenaltyBreakComment: 300,
    PenaltyBreakString: 1000,
    PenaltyBreakFirstLessLess: 120,
    PenaltyExcessCharacter: 1000000,
    PenaltyReturnTypeOnItsOwnLine: 60,
    PointerAlignment: Left,
    SpacesBeforeTrailingComments: 1,
    Cpp11BracedListStyle: true,
    Standard:        Cpp11,
    IndentWidth:     4,
    TabWidth:        4,
    UseTab:          Never,
    BreakBeforeBraces: Stroustrup,
    SpacesInParentheses: false,
    SpacesInSquareBrackets: false,
    SpacesInAngles:  false,
    SpaceInEmptyParentheses: false,
    SpacesInCStyleCastParentheses: false,
    SpaceAfterCStyleCast: false,
    SpacesInContainerLiterals: true,
    SpaceBeforeAssignmentOperators: true,
    ContinuationIndentWidth: 4,
    CommentPragmas:  '^ IWYU pragma:',
    ForEachMacros:   [ foreach, Q_FOREACH, BOOST_FOREACH ],
    SpaceBeforeParens: ControlStatements,
    DisableFormat:   false
    }]]

google_cpp_format_opts = [[{
    Language: Cpp,
    BasedOnStyle: Google,
    AccessModifierOffset: -1,
    AlignAfterOpenBracket: Align,
    AlignConsecutiveAssignments: None,
    AlignOperands: Align,
    AllowAllArgumentsOnNextLine: true,
    AllowAllConstructorInitializersOnNextLine: true,
    AllowAllParametersOfDeclarationOnNextLine: false,
    AllowShortBlocksOnASingleLine: Empty,
    AllowShortCaseLabelsOnASingleLine: false,
    AllowShortFunctionsOnASingleLine: Inline,
    AllowShortIfStatementsOnASingleLine: Never,
    AllowShortLambdasOnASingleLine: Inline,
    AllowShortLoopsOnASingleLine: false,
    AlwaysBreakAfterReturnType: None,
    AlwaysBreakTemplateDeclarations: Yes,
    BinPackArguments: true,
    BreakBeforeBraces: Custom,
    BraceWrapping: {
      AfterCaseLabel: false,
      AfterClass: false,
      AfterStruct: false,
      AfterControlStatement: Never,
      AfterEnum: false,
      AfterFunction: false,
      AfterNamespace: false,
      AfterUnion: false,
      AfterExternBlock: false,
      BeforeCatch: false,
      BeforeElse: false,
      BeforeLambdaBody: false,
      IndentBraces: false,
      SplitEmptyFunction: false,
      SplitEmptyRecord: false,
      SplitEmptyNamespace: false},
    BreakBeforeBinaryOperators: None,
    BreakBeforeTernaryOperators: true,
    BreakConstructorInitializers: BeforeColon,
    BreakInheritanceList: BeforeColon,
    ColumnLimit: 120,
    CompactNamespaces: false,
    ContinuationIndentWidth: 4,
    Cpp11BracedListStyle: true,
    DerivePointerAlignment: false,
    EmptyLineBeforeAccessModifier: LogicalBlock,
    FixNamespaceComments: true,
    IncludeBlocks: Preserve,
    IndentCaseLabels: true,
    IndentPPDirectives: None,
    IndentWidth: 2,
    KeepEmptyLinesAtTheStartOfBlocks: true,
    MaxEmptyLinesToKeep: 1,
    NamespaceIndentation: None,
    ObjCSpaceAfterProperty: false,
    ObjCSpaceBeforeProtocolList: true,
    PointerAlignment: Left,
    ReflowComments: false,
    SpaceAfterCStyleCast: false,
    SpaceAfterLogicalNot: false,
    SpaceAfterTemplateKeyword: true,
    SpaceBeforeAssignmentOperators: true,
    SpaceBeforeCpp11BracedList: false,
    SpaceBeforeCtorInitializerColon: true,
    SpaceBeforeInheritanceColon: true,
    SpaceBeforeParens: ControlStatements,
    SpaceBeforeRangeBasedForLoopColon: true,
    SpaceBeforeSquareBrackets: false,
    SpaceInEmptyParentheses: false,
    SpacesBeforeTrailingComments: 2,
    SpacesInAngles: false,
    SpacesInCStyleCastParentheses: false,
    SpacesInContainerLiterals: false,
    SpacesInParentheses: false,
    SpacesInSquareBrackets: false,
    Standard: c++11,
    TabWidth: 4,
    UseTab: Never,
}]]

meta_cpp_format_opts = [[{
    AccessModifierOffset: -2,
    ConstructorInitializerIndentWidth: 4,
    AlignEscapedNewlinesLeft: false,
    AlignTrailingComments: true,
    AllowAllParametersOfDeclarationOnNextLine: true,
    AllowShortBlocksOnASingleLine: false,
    AllowShortIfStatementsOnASingleLine: false,
    AllowShortLoopsOnASingleLine: false,
    AllowShortFunctionsOnASingleLine: None,
    AlwaysBreakTemplateDeclarations: true,
    AlwaysBreakBeforeMultilineStrings: false,
    BreakBeforeBinaryOperators: true,
    BreakBeforeTernaryOperators: true,
    BreakConstructorInitializersBeforeComma: false,
    BinPackParameters: true,
    ColumnLimit:     80,
    ConstructorInitializerAllOnOneLineOrOnePerLine: true,
    DerivePointerAlignment: false,
    ExperimentalAutoDetectBinPacking: false,
    IndentCaseLabels: true,
    IndentWrappedFunctionNames: false,
    IndentFunctionDeclarationAfterType: true,
    MaxEmptyLinesToKeep: 1,
    KeepEmptyLinesAtTheStartOfBlocks: true,
    NamespaceIndentation: None,
    ObjCSpaceAfterProperty: false,
    ObjCSpaceBeforeProtocolList: true,
    PenaltyBreakBeforeFirstCallParameter: 19,
    PenaltyBreakComment: 60,
    PenaltyBreakString: 1000,
    PenaltyBreakFirstLessLess: 120,
    PenaltyExcessCharacter: 1000000,
    PenaltyReturnTypeOnItsOwnLine: 60,
    PointerAlignment: Left,
    SpacesBeforeTrailingComments: 1,
    Cpp11BracedListStyle: true,
    Standard:        Cpp11,
    IndentWidth:     4,
    TabWidth:        8,
    UseTab:          Never,
    BreakBeforeBraces: Allman,
    SpacesInParentheses: false,
    SpacesInAngles:  false,
    SpaceInEmptyParentheses: false,
    SpacesInCStyleCastParentheses: false,
    SpacesInContainerLiterals: true,
    SpaceBeforeAssignmentOperators: true,
    ContinuationIndentWidth: 4,
    SpaceBeforeParens: ControlStatements,
}]]

conform.setup({
    formatters_by_ft = {
        lua = { "stylua" },
        -- Conform will run multiple formatters sequentially
        python = { "black" },
        -- Use a sub-list to run only the first available formatter
        cpp = { "clang_format" },
        ["*"] = { "trim_whitespace" },
    },
    formatters = {
        clang_format = {
            prepend_args = {
                "--style",
                cpp_format_opts,
            },
        },
    },
})

vim.o.formatexpr = "v:lua.require'conform'.formatexpr()"
